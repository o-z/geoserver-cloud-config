# Spring Boot application-specific config properties to be shared by all
# GeoServer microservices. Imported from geoserver.yml, in order to separate
# application from geoserver configuration.
server:
  tomcat:
    # Maximum number of connections that the server accepts and processes at any given time.
    # Once the limit has been reached, the operating system may still accept connections based on the "acceptCount" property.
    max-connections: ${tomcat.max.connections:8192}
    # Maximum queue length for incoming connection requests when all possible request processing threads are in use.
    accept-count: ${tomcat.accept.count:100}
    accesslog.enabled: ${tomcat.accesslog.enabled:false}
    mbeanregistry.enabled: ${tomcat.mbeanregistry.enabled:false}
    threads:
      # Minimum amount of worker threads.
      min-spare: ${tomcat.threads.min.spare:10}
      # Maximum amount of worker threads.
      max: ${tomcat.threads.max:200}
  forward-headers-strategy: NATIVE

spring:
  rabbitmq:
    host: ${rabbitmq.host:rabbitmq}
    port: ${rabbitmq.port:5672}
    username: ${rabbitmq.user:guest}
    password: ${rabbitmq.password:guest}
    virtual-host: ${rabbitmq.vhost:}
  cloud:
    bus:
      enabled: true
      id: ${info.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id
      trace.enabled: false #switch on tracing of acks (default off).
    stream:
      bindings:
        springCloudBusOutput:
          destination: gscatalog
        springCloudBusInput:
          destination: gscatalog
  jackson:
    default-property-inclusion: non-empty
    serialization.indent-output: false #set to true if doing manual testing and want formatted output

reactive.feign.cloud.enabled: true
reactive.feign.hystrix.enabled: false

management:
  endpoints:
    enabled-by-default: true
    web.exposure.include: "*"
  endpoint:
    info.enabled: true
    metrics.enabled: true
    shutdown.enabled: true
    health:
      enabled: true
      probes.enabled: true
      show-details: always
  metrics:
    binders:
      processor.enabled: true
      uptime.enabled: true
      jvm.enabled: true
    enable.all: true
    enable.jvm: true
    export:
      atlas.enabled: false

logging:
  level:
    root: warn
    org.springframework: warn
    org.springframework.cloud.bus: info
    org.springframework.retry: info
    org.springframework.jdbc.support: info
    com.zaxxer.hikari.pool: OFF
    # reactivefeign:
    reactivefeign.client.log: info
    #    com.netflix.eureka.registry.AbstractInstanceRegistry: error # log flooding with "WARN No remote registry available for the remote region us-east-1"
    #    com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver: error # log flooding with "WARN No remote registry available for the remote region us-east-1"
    # geoserver roots
    org.geotools.autoconfigure: info
    oshi.hardware.platform.linux: error
    oshi.software.os: error
    org.geoserver: warn
    org.geoserver.catalog.datadir: info
    org.geoserver.catalog.plugin: info
    org.geoserver.jackson: info
    org.geotools.jackson: info
    org.geoserver.platform: error
    org.geoserver.platform.resource.MemoryLockProvider: info
    org.geoserver.platform.resource.NioFileLockProvider: info
    org.geoserver.platform.resource.FileLockProvider: info
    org.geoserver.jdbcconfig: info
    org.geoserver.security: info
    org.geoserver.cloud.security: info
    # gs-cloud roots
    org.geoserver.cloud: info
    org.geoserver.cloud.autoconfigure: info
    org.geoserver.cloud.config.factory: info
    # bus debugging
    org.geoserver.cloud.bus: info
    org.geoserver.cloud.event: info
    org.springframework.cloud.bus.BusAutoConfiguration: info
    org.springframework.cloud.bus.DefaultBusPathMatcher: info

---
# this profile is automatically included if any of the embedded
# config_first or discovery_first profile groups are active
spring.config.activate.on-profile: discovery_eureka
# Should only be set in application.yml (i.e. not in bootstrap.yml).
# Setting the value in bootstrap.yml will cause undesirable side effects like registering in eureka with an UNKNOWN status.
# See https://cloud.spring.io/spring-cloud-netflix/2.0.x/multi/multi__service_discovery_eureka_clients.html#_eureka_s_health_checks
eureka.client.healthcheck.enabled: true
eureka.server.url: http://discovery:8761/eureka

---
spring.config.activate.on-profile: debug
logging:
  level:
    root: info
    org.springframework: info
    # geoserver roots
    org.geoserver: info
    org.geoserver.catalog: debug
    org.geoserver.catalog.datadir: debug
    org.geoserver.catalog.plugin: debug
    org.geoserver.wms: info
    org.geoserver.wfs: info
    org.geoserver.jackson: debug
    org.geotools.jackson: debug
    org.geoserver.platform: error
    org.geoserver.platform.resource.MemoryLockProvider: info
    org.geoserver.platform.resource.NioFileLockProvider: debug
    org.geoserver.platform.resource.FileLockProvider: debug
    org.geoserver.jdbcconfig: info
    org.geoserver.security: debug
    org.geoserver.cloud.security: debug
    # gs-cloud roots
    org.geoserver.cloud: debug
    org.geoserver.cloud.config: debug
    org.geoserver.cloud.autoconfigure: trace
    org.geoserver.cloud.config.factory: trace
    org.geoserver.cloud.gwc: debug
    # bus debugging
    org.geoserver.cloud.bus: trace
    org.geoserver.cloud.event: debug
    org.springframework.cloud.bus: debug
    org.springframework.cloud.bus.BusAutoConfiguration: info
    org.springframework.cloud.bus.DefaultBusPathMatcher: info
    # reactivefeign:
    reactivefeign.client.log: info
